[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "transcribems"
version = "1.0.0"
description = "WhisperX Audio Transcription API with Speaker Identification"
authors = [
    {name = "TranscribeMS Team", email = "support@transcribems.com"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["transcription", "whisperx", "audio", "speech-recognition", "api"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core API Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",

    # WhisperX and Audio Processing
    "whisperx>=3.1.1",
    "torch>=2.1.0",
    "torchaudio>=2.1.0",
    "librosa>=0.10.1",
    "soundfile>=0.12.1",
    "ffmpeg-python>=0.2.0",

    # Background Task Processing
    "celery>=5.3.0",
    "redis>=5.0.0",

    # Data Models and Validation
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",

    # HTTP Client and Utilities
    "httpx>=0.25.0",
    "aiofiles>=23.2.0",

    # Logging and Monitoring
    "structlog>=23.2.0",
    "python-json-logger>=2.0.7",

    # Environment and Configuration
    "python-dotenv>=1.0.0",

    # Audio File Processing
    "mutagen>=1.47.0",

    # Date and Time Utilities
    "python-dateutil>=2.8.2",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",

    # Code Quality
    "black>=23.11.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "isort>=5.12.0",
    "pre-commit>=3.5.0",

    # Development Tools
    "ipython>=8.17.0",
    "jupyter>=1.0.0",

    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
]

gpu = [
    # GPU-specific PyTorch (CUDA 12.1)
    "torch>=2.1.0+cu121",
    "torchaudio>=2.1.0+cu121",
]

docker = [
    # Docker health check utilities
    "psutil>=5.9.0",
]

[project.urls]
Homepage = "https://github.com/transcribems/transcribems"
Repository = "https://github.com/transcribems/transcribems.git"
Issues = "https://github.com/transcribems/transcribems/issues"
Documentation = "https://docs.transcribems.com"

[project.scripts]
transcribems = "src.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    "build",
    "dist",
    "*.egg-info",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "whisperx.*",
    "librosa.*",
    "soundfile.*",
    "mutagen.*",
    "ffmpeg.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]